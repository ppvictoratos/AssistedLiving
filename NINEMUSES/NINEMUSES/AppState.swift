//
//  AppState.swift
//  NINEMUSES
//
//  Created by Petie Positivo on 6/21/23.
//  Generated by ChatGPT
//

import Foundation
import ComposableArchitecture

struct AppState: Equatable {
    var authentication: AuthenticationState
    var likedSongs: LikedSongsState
    var isAuthenticated: Bool
}

enum AppAction {
    case authentication(AuthenticationAction)
    case likedSongs(LikedSongsAction)
}

struct AppEnvironment {
    var spotifyService: SpotifyService
    var authenticationService: AuthenticationService
}

let appReducer = Reducer<AppState, AppAction, AppEnvironment>.combine(
    authenticationReducer.pullback(
        state: \.authentication,
        action: /AppAction.authentication,
        environment: { _ in AuthenticationEnvironment(authenticationService: environment.authenticationService) }
    ),
    likedSongsReducer.pullback(
        state: \.likedSongs,
        action: /AppAction.likedSongs,
        environment: { _ in LikedSongsEnvironment(spotifyService: environment.spotifyService) }
    ),
    Reducer<AppState, AppAction, AppEnvironment> { state, action, environment in
        switch action {
        case .authentication(.loggedIn):
            state.isAuthenticated = true
            return .none
        case .authentication(.loggedOut):
            state.isAuthenticated = false
            return .none
        case .likedSongs:
            return .none
        case let .selectSong(song):
            state.selectedSong = song
            return .none
        }
    }
)
