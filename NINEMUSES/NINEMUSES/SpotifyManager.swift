//
//  SpotifyManager.swift
//  NINEMUSES
//
//  Created by Petie Positivo on 6/22/23.
//  Generated by ChatGPT
//

import Foundation
import Alamofire
import SpotifyiOS

class SpotifyManager {
    static let shared = SpotifyManager()
    private let tokenRefreshThreshold: TimeInterval = 300 // 5 minutes
    private var accessToken: SpotifyAccessToken?
    
    private init() {}
    
    func authenticate(completion: @escaping (Result<SpotifyAccessToken, Error>) -> Void) {
        // Use the SpotifyiOS SDK to initiate the authentication process
        let authOptions = SpotifyDefaultAuthorizationOptions(
            clientID: Constants.spotifyClientID,
            redirectURI: URL(string: Constants.spotifyRedirectUri)!,
            scopes: [.appRemoteControl, .userReadRecentlyPlayed]
        )
        
        SpotifyAppRemote.checkIfSpotifyAppIsActive { [weak self] isActive in
            if isActive {
                SpotifyAppRemote.authorizeAndPlayURI("")
            } else {
                SpotifyAppRemote.authorizeAndPlayURI("")
            }
        }
        
        // In the completion handler of the authentication process, handle the result
        // and call the completion block with the access token or an error
        // For example:
        /*
        SpotifyAppRemote.authorizeAndPlayURI("") { _, error in
            if let error = error {
                completion(.failure(error))
            } else if let accessToken = SpotifyAppRemote.authorizationParameters.accessToken {
                self.accessToken = SpotifyAccessToken(accessToken: accessToken)
                completion(.success(self.accessToken!))
            } else {
                completion(.failure(SpotifyError.unknown))
            }
        }
        */
    }
    
    func getRecentlyPlayedSongs(completion: @escaping (Result<[Song], Error>) -> Void) {
        guard let accessToken = accessToken else {
            completion(.failure(SpotifyError.notAuthenticated))
            return
        }
        
        let headers: HTTPHeaders = [
            "Authorization": "Bearer \(accessToken.accessToken)"
        ]
        
        AF.request(Constants.spotifyAPIBaseUrl + Constants.spotifyRecentlyPlayedEndpoint,
                   headers: headers)
            .validate()
            .responseDecodable(of: RecentlyPlayedResponse.self) { response in
                switch response.result {
                case .success(let recentlyPlayedResponse):
                    let songs = recentlyPlayedResponse.items.map { item -> Song in
                        // Map the response data to the Song model
                        return Song(id: item.track.id,
                                    name: item.track.name,
                                    artist: item.track.artists.first?.name ?? "",
                                    album: item.track.album.name,
                                    imageURL: URL(string: item.track.album.images.first?.url ?? "")!,
                                    playedDate: item.playedAt)
                    }
                    completion(.success(songs))
                case .failure(let error):
                    completion(.failure(error))
                }
            }
    }
    
    private func refreshTokenIfNeeded() {
        guard let accessToken = accessToken else { return }
        
        let currentTime = Date().timeIntervalSince1970
        let tokenExpirationTime = accessToken.expirationDate.timeIntervalSince1970
        
        if tokenExpirationTime - currentTime <= tokenRefreshThreshold {
            // Perform token refresh using the SpotifyiOS SDK or your preferred method
            
            // Update the access token with the new one
            
            // Example:
            /*
            SpotifyAppRemote.authorizationParameters.accessToken = newAccessToken
            self.accessToken = SpotifyAccessToken(accessToken: newAccessToken)
            */
        }
    }
}
